package NewLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import NewLanguage.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.ButtonRender:
        return new ButtonRender_TextGen();
      case LanguageConceptSwitch.ComponentRender:
        return new ComponentRender_TextGen();
      case LanguageConceptSwitch.RComponent:
        return new RComponent_TextGen();
      case LanguageConceptSwitch.RInvetarDLS:
        return new RInvetarDLS_TextGen();
      case LanguageConceptSwitch.TableRender:
        return new TableRender_TextGen();
      case LanguageConceptSwitch.TextRender:
        return new TextRender_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.RInvetarDLS$fY)) {
        String fname = getFileName_RInvetarDLS(root);
        String ext = getFileExtension_RInvetarDLS(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_RInvetarDLS(root), root);
        continue;
      }
    }
  }
  private static String getFileName_RInvetarDLS(SNode node) {
    return SPropertyOperations.getString(node, PROPS.dls_name$TnuV);
  }
  private static String getFileExtension_RInvetarDLS(SNode node) {
    return "js";
  }
  private static String getPath_RInvetarDLS(SNode node) {
    return "inventar";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RInvetarDLS$fY = MetaAdapterFactory.getConcept(0xd25897b99aa4e01L, 0x981001ea0072c283L, 0x2c7d7d2448d98cddL, "NewLanguage.structure.RInvetarDLS");
  }

  private static final class PROPS {
    /*package*/ static final SProperty dls_name$TnuV = MetaAdapterFactory.getProperty(0xd25897b99aa4e01L, 0x981001ea0072c283L, 0x2c7d7d2448d98cddL, 0x2c7d7d2448d98ce0L, "dls_name");
  }
}
