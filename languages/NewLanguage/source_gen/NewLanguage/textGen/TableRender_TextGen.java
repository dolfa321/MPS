package NewLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Iterator;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class TableRender_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("<table>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.append("<thead>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.append("<tr>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode col : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.columns$mc1K))) {
      tgs.append("<th>");
      tgs.append(SPropertyOperations.getString(col, PROPS.name$VDtT));
      tgs.append("</th>");
      tgs.newLine();
    }
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("</tr>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("</thead>");
    tgs.newLine();

    tgs.append("<tbody>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.append("{data.map((row, index) => ( ");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.append("<tr key={index}>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    {
      Iterator<SNode> col_it = ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.columns$mc1K)).iterator();
      SNode col_var;
      while (col_it.hasNext()) {
        col_var = col_it.next();
        tgs.append("<td>{");
        tgs.append("row.");
        tgs.append(SPropertyOperations.getString(col_var, PROPS.name$VDtT));
        tgs.append("}</td>");
        tgs.newLine();
      }
    }
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("</tr>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("))}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("</tbody>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("</table>");
    tgs.newLine();
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$VDtT = MetaAdapterFactory.getProperty(0xd25897b99aa4e01L, 0x981001ea0072c283L, 0x2b90a9c731294b0eL, 0x2b90a9c731294b0fL, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink columns$mc1K = MetaAdapterFactory.getContainmentLink(0xd25897b99aa4e01L, 0x981001ea0072c283L, 0x505fed17fdfd5494L, 0x505fed17fdfd5497L, "columns");
  }
}
